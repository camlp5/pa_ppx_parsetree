(**pp -package pa_ppx_parsetree_quotations -syntax camlp5r *)
[@@@"ocaml.text" "attribute";];
<:attribute< [@ $attrid:s$ $list:x$] >>;
<:attribute< [@ $attrid:s$ : $list:x$] >>;
<:attribute< [@ $attrid:s$ : $x$] >>;
<:attribute< [@ $attrid:s$ ? $x1$] >>;
<:attribute< [@ $attrid:s$ ? $x1$ when $x2$] >>;
<:attribute< [@ $attrid:s$ ? $x1$ $expropt:ox2$] >>;
[@@@"ocaml.text" "extension";];
<:extension< [% $attrid:s$ $list:x$] >>;
<:extension< [% $attrid:s$ : $list:x$] >>;
<:extension< [% $attrid:s$ : $x$] >>;
<:extension< [% $attrid:s$ ? $x1$] >>;
<:extension< [% $attrid:s$ ? $x1$ when $x2$] >>;
<:extension< [% $attrid:s$ ? $x1$ $expropt:ox2$] >>;
[@@@"ocaml.text" "attributes";];
[@@@"ocaml.text" "payload";];
[@@@"ocaml.text" "core_type";];
<:core_type< _ $algattrs:attrs$ >>;
<:core_type< _ >>;
<:core_type< ' $lid:s$ $algattrs:attrs$ >>;
<:core_type< ' $lid:s$ >>;
<:core_type< $label:x1$ $x2$ -> $x3$ $algattrs:attrs$ >>;
<:core_type< $label:x1$ $x2$ -> $x3$ >>;
<:core_type< $tuplelist:lx$ $algattrs:attrs$ >>;
<:core_type< $tuplelist:lx$ >>;
<:core_type< $list:lx$ $lid:s$ $algattrs:attrs$ >>;
<:core_type< $list:lx$ $lid:s$ >>;
<:core_type< $list:lx$ $longid:x$ . $lid:s$ $algattrs:attrs$ >>;
<:core_type< $list:lx$ $longid:x$ . $lid:s$ >>;
<:core_type< $list:lx$ $longlid:x$ $algattrs:attrs$ >>;
<:core_type< $list:lx$ $longlid:x$ >>;
<:core_type< < $list:lx$ $closedflag:x$ > $algattrs:attrs$ >>;
<:core_type< < $list:lx$ $closedflag:x$ > >>;
<:core_type< $list:lx$ # $lid:s$ $algattrs:attrs$ >>;
<:core_type< $list:lx$ # $lid:s$ >>;
<:core_type< $list:lx$ # $longid:x$ . $lid:s$ $algattrs:attrs$ >>;
<:core_type< $list:lx$ # $longid:x$ . $lid:s$ >>;
<:core_type< $x$ as ' $lid:s$ $algattrs:attrs$ >>;
<:core_type< $x$ as ' $lid:s$ >>;
<:core_type< [ $closedflag:x$ $list:lx1$ $opt:None$ ] $algattrs:attrs$ >>;
<:core_type< [ $closedflag:x$ $list:lx1$ $opt:None$ ] >>;
<:core_type< [ $closedflag:x$ $list:lx1$ > $list:lx2$ ] $algattrs:attrs$ >>;
<:core_type< [ $closedflag:x$ $list:lx1$ > $list:lx2$ ] >>;
<:core_type< [ $closedflag:x$ $list:lx1$ $opt:olx2$ ] $algattrs:attrs$ >>;
<:core_type< [ $closedflag:x$ $list:lx1$ $opt:olx2$ ] >>;
<:core_type< [< $list:lx1$ ] $algattrs:attrs$ >>;
<:core_type< [< $list:lx1$ ] >>;
{Parsetree.ptyp_desc = Parsetree.Ptyp_poly lx x; Parsetree.ptyp_loc = loc; Parsetree.ptyp_loc_stack = []; Parsetree.ptyp_attributes = attrs};
{Parsetree.ptyp_desc = Parsetree.Ptyp_poly lx x; Parsetree.ptyp_loc = loc; Parsetree.ptyp_loc_stack = []; Parsetree.ptyp_attributes = []};
<:core_type< (module $lid:s$ with $list:xf2$) $algattrs:attrs$ >>;
<:core_type< (module $lid:s$ with $list:xf2$) >>;
<:core_type< (module $longid:x$ . $lid:s$ with $list:xf2$) $algattrs:attrs$ >>;
<:core_type< (module $longid:x$ . $lid:s$ with $list:xf2$) >>;
{Parsetree.ptyp_desc = Parsetree.Ptyp_package ({Location.txt = x; Location.loc = loc}, xf2); Parsetree.ptyp_loc = loc; Parsetree.ptyp_loc_stack = []; Parsetree.ptyp_attributes = attrs};
{Parsetree.ptyp_desc = Parsetree.Ptyp_package ({Location.txt = x; Location.loc = loc}, xf2); Parsetree.ptyp_loc = loc; Parsetree.ptyp_loc_stack = []; Parsetree.ptyp_attributes = []};
<:core_type< [% $attrid:s$ $list:x$] $algattrs:attrs$ >>;
<:core_type< [% $attrid:s$ $list:x$] >>;
<:core_type< [% $attrid:s$ : $list:x$] $algattrs:attrs$ >>;
<:core_type< [% $attrid:s$ : $list:x$] >>;
<:core_type< [% $attrid:s$ : $x$] $algattrs:attrs$ >>;
<:core_type< [% $attrid:s$ : $x$] >>;
<:core_type< [% $attrid:s$ ? $x1$] $algattrs:attrs$ >>;
<:core_type< [% $attrid:s$ ? $x1$] >>;
<:core_type< [% $attrid:s$ ? $x1$ when $x2$] $algattrs:attrs$ >>;
<:core_type< [% $attrid:s$ ? $x1$ when $x2$] >>;
<:core_type< [% $attrid:s$ ? $x1$ $expropt:ox2$] $algattrs:attrs$ >>;
<:core_type< [% $attrid:s$ ? $x1$ $expropt:ox2$] >>;
[@@@"ocaml.text" "core_type_desc";];
[@@@"ocaml.text" "package_type";];
[@@@"ocaml.text" "row_field";];
<:row_field< ` $id:x$ of & $list:lx$ $algattrs:attrs$ >>;
<:row_field< ` $id:x$ of & $list:lx$ >>;
<:row_field< ` $id:x$ of $list:lx$ $algattrs:attrs$ >>;
<:row_field< ` $id:x$ of $list:lx$ >>;
<:row_field< ` $id:x$ of $isconst:b$ $list:lx$ $algattrs:attrs$ >>;
<:row_field< ` $id:x$ of $isconst:b$ $list:lx$ >>;
{Parsetree.prf_desc = Parsetree.Rinherit x; Parsetree.prf_loc = loc; Parsetree.prf_attributes = attrs}; (* cannot put alg-attr on Rinherit *)
<:row_field< $x$ >>;
[@@@"ocaml.text" "row_field_desc";];
[@@@"ocaml.text" "object_field";];
<:object_field< $lid:x$ : $x2$ $algattrs:attrs$ >>;
<:object_field< $lid:x$ : $x2$ >>;
{Parsetree.pof_desc = Parsetree.Oinherit x; Parsetree.pof_loc = loc; Parsetree.pof_attributes = attrs}; (* cannot put alg-attr on oinherit *)
<:object_field< $x$ >>;
[@@@"ocaml.text" "object_field_desc";];
[@@@"ocaml.text" "pattern";];
<:pattern< _ $algattrs:attrs$ >>;
<:pattern< _ >>;
<:pattern<  $lid:s$ $algattrs:attrs$ >>;
<:pattern<  $lid:s$ >>;
<:pattern< $x1$ as $lid:s$ $algattrs:attrs$ >>;
<:pattern< $x1$ as $lid:s$ >>;
<:pattern< $int:s$ $algattrs:attrs$ >>;
<:pattern< $int:s$ >>;
<:pattern< $int32:s$ $algattrs:attrs$ >>;
<:pattern< $int32:s$ >>;
<:pattern< $int64:s$ $algattrs:attrs$ >>;
<:pattern< $int64:s$ >>;
<:pattern< $nativeint:s$ $algattrs:attrs$ >>;
<:pattern< $nativeint:s$ >>;
<:pattern< $char:x$ $algattrs:attrs$ >>;
<:pattern< $char:x$ >>;
<:pattern< $string:s1$ $algattrs:attrs$ >>;
<:pattern< $string:s1$ >>;
<:pattern< $string:s1$ $delim:s2$ $algattrs:attrs$ >>;
<:pattern< $string:s1$ $delim:s2$ >>;
#if OCAML_VERSION >= (4,11,0)
{Parsetree.ppat_desc = Parsetree.Ppat_constant (Parsetree.Pconst_string s1 loc os2); Parsetree.ppat_loc = loc; Parsetree.ppat_loc_stack = []; Parsetree.ppat_attributes = attrs};
{Parsetree.ppat_desc = Parsetree.Ppat_constant (Parsetree.Pconst_string s1 loc os2); Parsetree.ppat_loc = loc; Parsetree.ppat_loc_stack = []; Parsetree.ppat_attributes = []};
#else
{Parsetree.ppat_desc = Parsetree.Ppat_constant (Parsetree.Pconst_string s1 os2); Parsetree.ppat_loc = loc; Parsetree.ppat_loc_stack = []; Parsetree.ppat_attributes = attrs};
{Parsetree.ppat_desc = Parsetree.Ppat_constant (Parsetree.Pconst_string s1 os2); Parsetree.ppat_loc = loc; Parsetree.ppat_loc_stack = []; Parsetree.ppat_attributes = []};
#endif
<:pattern< $float:sxf1$ $algattrs:attrs$ >>;
<:pattern< $float:sxf1$ >>;
{Parsetree.ppat_desc = Parsetree.Ppat_constant x; Parsetree.ppat_loc = loc; Parsetree.ppat_loc_stack = []; Parsetree.ppat_attributes = attrs};
{Parsetree.ppat_desc = Parsetree.Ppat_constant x; Parsetree.ppat_loc = loc; Parsetree.ppat_loc_stack = []; Parsetree.ppat_attributes = []};
<:pattern< $constant:x1$ .. $constant:x2$ $algattrs:attrs$ >>;
<:pattern< $constant:x1$ .. $constant:x2$ >>;
<:pattern<  $tuplelist:lx$ $algattrs:attrs$ >>;
<:pattern<  $tuplelist:lx$ >>;
<:pattern< $longid:x$ $algattrs:attrs$ >>;
<:pattern< $longid:x$ >>;
#if OCAML_VERSION >= (4,13,0)
<:pattern< $longid:x$ (type $list:lxxf1$) $lxxf2$ $algattrs:attrs$ >>;
<:pattern< $longid:x$ (type $list:lxxf1$) $lxxf2$ >>;
<:pattern< $longid:x$ $pattopt:olxx$ $algattrs:attrs$ >>;
<:pattern< $longid:x$ $pattopt:olxx$ >>;
#else
<:pattern< ($longid:x$ $x2$) $algattrs:attrs$ >>;
<:pattern< $longid:x$ $x2$ >>;
<:pattern< $longid:x$ $pattopt:ox2$ $algattrs:attrs$ >>;
<:pattern< $longid:x$ $pattopt:ox2$ >>;
#endif
<:pattern< ` $id:x1$ $algattrs:attrs$ >>;
<:pattern< ` $id:x1$ >>;
<:pattern< ( ` $id:x1$ $x2$ ) $algattrs:attrs$ >>;
<:pattern< ` $id:x1$ $x2$ >>;
<:pattern< ` $id:x1$ $pattopt:ox2$ $algattrs:attrs$ >>;
<:pattern< ` $id:x1$ $pattopt:ox2$ >>;
<:pattern< { $list:lxx$ $closedflag:x$ } $algattrs:attrs$ >>;
<:pattern< { $list:lxx$ $closedflag:x$ } >>;
<:pattern< [| $list:lx$ |] $algattrs:attrs$ >>;
<:pattern< [| $list:lx$ |] >>;
<:pattern< ( $x1$ | $x2$ ) $algattrs:attrs$ >>;
<:pattern< $x1$ | $x2$ >>;
<:pattern< ( $x1$ : $x2$ ) $algattrs:attrs$ >>;
<:pattern< ( $x1$ : $x2$ ) >>;
<:pattern< # $lid:s$ $algattrs:attrs$ >>;
<:pattern< # $lid:s$ >>;
<:pattern< # $longid:x$ . $lid:s$ $algattrs:attrs$ >>;
<:pattern< # $longid:x$ . $lid:s$ >>;
<:pattern< # $longlid:x$ $algattrs:attrs$ >>;
<:pattern< # $longlid:x$ >>;
<:pattern< lazy $x$ $algattrs:attrs$ >>;
<:pattern< lazy $x$ >>;
<:pattern< (module _) $algattrs:attrs$ >>;
<:pattern< (module _) >>;
<:pattern< (module $uid:s$) $algattrs:attrs$ >>;
<:pattern< (module $uid:s$) >>;
<:pattern< (module $opt:os$) $algattrs:attrs$ >>;
<:pattern< (module $opt:os$) >>;
<:pattern< (exception $x$) $algattrs:attrs$ >>;
<:pattern< exception $x$ >>;
<:pattern< [% $attrid:s$ $list:x$] $algattrs:attrs$ >>;
<:pattern< [% $attrid:s$ $list:x$] >>;
<:pattern< [% $attrid:s$ : $list:x$] $algattrs:attrs$ >>;
<:pattern< [% $attrid:s$ : $list:x$] >>;
<:pattern< [% $attrid:s$ : $x$] $algattrs:attrs$ >>;
<:pattern< [% $attrid:s$ : $x$] >>;
<:pattern< [% $attrid:s$ ? $x1$] $algattrs:attrs$ >>;
<:pattern< [% $attrid:s$ ? $x1$] >>;
<:pattern< [% $attrid:s$ ? $x1$ when $x2$] $algattrs:attrs$ >>;
<:pattern< [% $attrid:s$ ? $x1$ when $x2$] >>;
<:pattern< [% $attrid:s$ ? $x1$ $expropt:ox2$] $algattrs:attrs$ >>;
<:pattern< [% $attrid:s$ ? $x1$ $expropt:ox2$] >>;
<:pattern< $longid:x$ . $x2$ $algattrs:attrs$ >>;
<:pattern< $longid:x$ . $x2$ >>;
[@@@"ocaml.text" "pattern_desc";];
[@@@"ocaml.text" "expression";];
<:expression< $lid:s$ $algattrs:attrs$ >>;
<:expression< $lid:s$ >>;
<:expression< $longid:x$ . $lid:s$ $algattrs:attrs$ >>;
<:expression< $longid:x$ . $lid:s$ >>;
<:expression< $longlid:x$ $algattrs:attrs$ >>;
<:expression< $longlid:x$ >>;
<:expression< $int:s$ $algattrs:attrs$ >>;
<:expression< $int:s$ >>;
<:expression< $int32:s$ $algattrs:attrs$ >>;
<:expression< $int32:s$ >>;
<:expression< $int64:s$ $algattrs:attrs$ >>;
<:expression< $int64:s$ >>;
<:expression< $nativeint:s$ $algattrs:attrs$ >>;
<:expression< $nativeint:s$ >>;
<:expression< $char:x$ $algattrs:attrs$ >>;
<:expression< $char:x$ >>;
<:expression< $string:s1$ $algattrs:attrs$ >>;
<:expression< $string:s1$ >>;
<:expression< $string:s1$ $delim:s2$ $algattrs:attrs$ >>;
<:expression< $string:s1$ $delim:s2$ >>;
#if OCAML_VERSION >= (4,11,0)
{Parsetree.pexp_desc = Parsetree.Pexp_constant (Parsetree.Pconst_string s1 loc os2); Parsetree.pexp_loc = loc; Parsetree.pexp_loc_stack = []; Parsetree.pexp_attributes = attrs};
{Parsetree.pexp_desc = Parsetree.Pexp_constant (Parsetree.Pconst_string s1 loc os2); Parsetree.pexp_loc = loc; Parsetree.pexp_loc_stack = []; Parsetree.pexp_attributes = []};
#else
{Parsetree.pexp_desc = Parsetree.Pexp_constant (Parsetree.Pconst_string s1 os2); Parsetree.pexp_loc = loc; Parsetree.pexp_loc_stack = []; Parsetree.pexp_attributes = attrs};
{Parsetree.pexp_desc = Parsetree.Pexp_constant (Parsetree.Pconst_string s1 os2); Parsetree.pexp_loc = loc; Parsetree.pexp_loc_stack = []; Parsetree.pexp_attributes = []};
#endif
<:expression< $float:sxf1$ $algattrs:attrs$ >>;
<:expression< $float:sxf1$ >>;
<:expression< $constant:x$ $algattrs:attrs$ >>;
<:expression< $constant:x$ >>;
<:expression< ( let $recflag:x1$ $list:lx$ in $x2$ ) $algattrs:attrs$ >>;
<:expression< let $recflag:x1$ $list:lx$ in $x2$ >>;
<:expression< function $list:lx$ $algattrs:attrs$ >>;
<:expression< function $list:lx$ >>;
<:expression< ( fun $label:x1$ ( $x3$ ) -> $x4$ ) $algattrs:attrs$ >>;
<:expression< fun $label:x1$ ( $x3$ ) -> $x4$ >>;
<:expression< ( fun $label:x1$ ( $x3$ = $x2$ ) -> $x4$ ) $algattrs:attrs$ >>;
<:expression< fun $label:x1$ ( $x3$ = $x2$ ) -> $x4$ >>;
<:expression< ( fun $label:x1$ ( $x3$ $expropt:ox2$ ) -> $x4$ ) $algattrs:attrs$ >>;
<:expression< fun $label:x1$ ( $x3$ $expropt:ox2$ ) -> $x4$ >>;
<:expression< $x$ $list:lxx$ $algattrs:attrs$ >>;
<:expression< $x$ $list:lxx$ >>;
<:expression< match $x$ with $list:lx$ $algattrs:attrs$ >>;
<:expression< match $x$ with $list:lx$ >>;
<:expression< try $x$ with $list:lx$ $algattrs:attrs$ >>;
<:expression< try $x$ with $list:lx$ >>;
<:expression<  $tuplelist:lx$ $algattrs:attrs$ >>;
<:expression<  $tuplelist:lx$ >>;
<:expression< $longid:x$ $algattrs:attrs$ >>;
<:expression< $longid:x$ >>;
<:expression< $longid:x$ $x2$ $algattrs:attrs$ >>;
<:expression< $longid:x$ $x2$ >>;
<:expression< $longid:x$ $expropt:ox2$ $algattrs:attrs$ >>;
<:expression< $longid:x$ $expropt:ox2$ >>;
<:expression< ` $id:x1$ $algattrs:attrs$ >>;
<:expression< ` $id:x1$ >>;
<:expression< ` $id:x1$ $x2$ $algattrs:attrs$ >>;
<:expression< ` $id:x1$ $x2$ >>;
<:expression< ` $id:x1$ $expropt:ox2$ $algattrs:attrs$ >>;
<:expression< ` $id:x1$ $expropt:ox2$ >>;
<:expression< { $list:lxx$ } $algattrs:attrs$ >>;
<:expression< { $list:lxx$ } >>;
<:expression< { $x$ with $list:lxx$ } $algattrs:attrs$ >>;
<:expression< { $x$ with $list:lxx$ } >>;
<:expression< { $withe:ox$ $list:lxx$ } $algattrs:attrs$ >>;
<:expression< { $withe:ox$ $list:lxx$ } >>;
<:expression< $x1$ . $lid:s$ $algattrs:attrs$ >>;
<:expression< $x1$ . $lid:s$ >>;
<:expression< $x1$ . $longid:x$ . $lid:s$ $algattrs:attrs$ >>;
<:expression< $x1$ . $longid:x$ . $lid:s$ >>;
{Parsetree.pexp_desc = Parsetree.Pexp_field x1 {Location.txt = x; Location.loc = loc}; Parsetree.pexp_loc = loc; Parsetree.pexp_loc_stack = []; Parsetree.pexp_attributes = attrs};
{Parsetree.pexp_desc = Parsetree.Pexp_field x1 {Location.txt = x; Location.loc = loc}; Parsetree.pexp_loc = loc; Parsetree.pexp_loc_stack = []; Parsetree.pexp_attributes = []};
<:expression< ( $x1$ . $lid:s$ <- $x3$ ) $algattrs:attrs$ >>;
<:expression< $x1$ . $lid:s$ <- $x3$ >>;
<:expression< ( $x1$ . $longid:x$ . $lid:s$ <- $x3$ ) $algattrs:attrs$ >>;
<:expression< $x1$ . $longid:x$ . $lid:s$ <- $x3$ >>;
{Parsetree.pexp_desc = Parsetree.Pexp_setfield x1 {Location.txt = x; Location.loc = loc} x3; Parsetree.pexp_loc = loc; Parsetree.pexp_loc_stack = []; Parsetree.pexp_attributes = attrs};
{Parsetree.pexp_desc = Parsetree.Pexp_setfield x1 {Location.txt = x; Location.loc = loc} x3; Parsetree.pexp_loc = loc; Parsetree.pexp_loc_stack = []; Parsetree.pexp_attributes = []};
<:expression< [| $list:lx$ |] $algattrs:attrs$ >>;
<:expression< [| $list:lx$ |] >>;
<:expression< ( if $x1$ then $x2$ ) $algattrs:attrs$ >>;
<:expression< if $x1$ then $x2$ >>;
<:expression< ( if $x1$ then $x2$ else $x3$ ) $algattrs:attrs$ >>;
<:expression< if $x1$ then $x2$ else $x3$ >>;
<:expression< if $x1$ then $x2$ $expropt:ox3$ $algattrs:attrs$ >>;
<:expression< if $x1$ then $x2$ $expropt:ox3$ >>;
<:expression< ( $x1$ ; $x2$ ) $algattrs:attrs$ >>;
<:expression< $x1$ ; $x2$ >>;
<:expression< while $x1$ do $x2$ done $algattrs:attrs$ >>;
<:expression< while $x1$ do $x2$ done >>;
<:expression< for $x1$ = $x2$ to $x3$ do $x5$ done $algattrs:attrs$ >>;
<:expression< for $x1$ = $x2$ to $x3$ do $x5$ done >>;
<:expression< for $x1$ = $x2$ downto $x3$ do $x5$ done $algattrs:attrs$ >>;
<:expression< for $x1$ = $x2$ downto $x3$ do $x5$ done >>;
<:expression< for $x1$ = $x2$ $dirflag:x4$ $x3$ do $x5$ done $algattrs:attrs$ >>;
<:expression< for $x1$ = $x2$ $dirflag:x4$ $x3$ do $x5$ done >>;
<:expression< ( $x1$ : $x2$ ) $algattrs:attrs$ >>;
<:expression< ( $x1$ : $x2$ ) >>;
<:expression< ( $x1$ :> $x3$ ) $algattrs:attrs$ >>;
<:expression< ( $x1$ :> $x3$ ) >>;
<:expression< ( $x1$ : $x2$ :> $x3$ ) $algattrs:attrs$ >>;
<:expression< ( $x1$ : $x2$ :> $x3$ ) >>;
<:expression< ( $x1$ $ctypopt:ox2$ :> $x3$ ) $algattrs:attrs$ >>;
<:expression< ( $x1$ $ctypopt:ox2$ :> $x3$ ) >>;
<:expression< $x1$ # $lid:x$ $algattrs:attrs$ >>;
<:expression< $x1$ # $lid:x$ >>;
<:expression< (new $lid:s$ ) $algattrs:attrs$ >>;
<:expression< new $lid:s$ >>;
<:expression< (new $longid:x$ . $lid:s$) $algattrs:attrs$ >>;
<:expression< new $longid:x$ . $lid:s$ >>;
{Parsetree.pexp_desc = Parsetree.Pexp_new {Location.txt = x; Location.loc = loc}; Parsetree.pexp_loc = loc; Parsetree.pexp_loc_stack = []; Parsetree.pexp_attributes = attrs};
{Parsetree.pexp_desc = Parsetree.Pexp_new {Location.txt = x; Location.loc = loc}; Parsetree.pexp_loc = loc; Parsetree.pexp_loc_stack = []; Parsetree.pexp_attributes = []};
<:expression< ($lid:x$ <- $x2$) $algattrs:attrs$ >>;
<:expression< $lid:x$ <- $x2$ >>;
<:expression< {< $list:lxx$ >} $algattrs:attrs$ >>;
<:expression< {< $list:lxx$ >} >>;
<:expression< (let module _ = $me$ in $x2$) $algattrs:attrs$ >>;
<:expression< let module _ = $me$ in $x2$ >>;
<:expression< (let module $uid:s$ = $me$ in $x2$) $algattrs:attrs$ >>;
<:expression< let module $uid:s$ = $me$ in $x2$ >>;
<:expression< (let module $opt:os$ = $me$ in $x2$) $algattrs:attrs$ >>;
<:expression< (let module $opt:os$ = $me$ in $x2$) >>;
#if OCAML_VERSION >= (4,14,0)
<:expression< (let exception $uid:s$ : $list:lx$ . $list:lx$ $opt:None$ $algattrs:attrs$ in $x2$) $algattrs:attrs$ >>;
<:expression< (let exception $uid:s$ : $list:lx$ . $list:lx$ $opt:None$ $algattrs:attrs$ in $x2$) >>;
<:expression< (let exception $uid:s$ : $list:lx$ . $list:lx$ $opt:None$ in $x2$) $algattrs:attrs$ >>;
<:expression< let exception $uid:s$ : $list:lx$ . $list:lx$ $opt:None$ in $x2$ >>;
<:expression< (let exception $uid:s$ : $list:lx$ . $list:lx$ -> $x2$ $algattrs:attrs$ in $x2$) $algattrs:attrs$ >>;
<:expression< (let exception $uid:s$ : $list:lx$ . $list:lx$ -> $x2$ $algattrs:attrs$ in $x2$) >>;
<:expression< (let exception $uid:s$ : $list:lx$ . $list:lx$ -> $x2$ in $x2$) $algattrs:attrs$ >>;
<:expression< let exception $uid:s$ : $list:lx$ . $list:lx$ -> $x2$ in $x2$ >>;
<:expression< (let exception $uid:s$ : $list:lx$ . $list:lx$ $opt:ox2$ $algattrs:attrs$ in $x2$) $algattrs:attrs$ >>;
<:expression< let exception $uid:s$ : $list:lx$ . $list:lx$ $opt:ox2$ $algattrs:attrs$ in $x2$ >>;
<:expression< (let exception $uid:s$ : $list:lx$ . $list:lx$ $opt:ox2$ in $x2$) $algattrs:attrs$ >>;
<:expression< let exception $uid:s$ : $list:lx$ . $list:lx$ $opt:ox2$ in $x2$ >>;
<:expression< (let exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:None$ $algattrs:attrs$ in $x2$) $algattrs:attrs$ >>;
<:expression< let exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:None$ $algattrs:attrs$ in $x2$ >>;
<:expression< (let exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:None$ in $x2$) $algattrs:attrs$ >>;
<:expression< let exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:None$ in $x2$ >>;
<:expression< (let exception $uid:s$ : $list:lx$ . { $list:lx$} -> $x2$ $algattrs:attrs$ in $x2$) $algattrs:attrs$ >>;
<:expression< let exception $uid:s$ : $list:lx$ . { $list:lx$} -> $x2$ $algattrs:attrs$ in $x2$ >>;
<:expression< (let exception $uid:s$ : $list:lx$ . { $list:lx$} -> $x2$ in $x2$) $algattrs:attrs$ >>;
<:expression< let exception $uid:s$ : $list:lx$ . { $list:lx$} -> $x2$ in $x2$ >>;
<:expression< (let exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:ox2$ $algattrs:attrs$ in $x2$) $algattrs:attrs$ >>;
<:expression< let exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:ox2$ $algattrs:attrs$ in $x2$ >>;
<:expression< (let exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:ox2$ in $x2$) $algattrs:attrs$ >>;
<:expression< let exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:ox2$ in $x2$ >>;
#else
<:expression< (let exception $uid:s$ : $list:lx$ $opt:None$ $algattrs:attrs$ in $x2$) $algattrs:attrs$ >>;
<:expression< let exception $uid:s$ : $list:lx$ $opt:None$ $algattrs:attrs$ in $x2$ >>;
<:expression< (let exception $uid:s$ : $list:lx$ $opt:None$ in $x2$) $algattrs:attrs$ >>;
<:expression< let exception $uid:s$ : $list:lx$ $opt:None$ in $x2$ >>;

<:expression< (let exception $uid:s$ : $list:lx$ -> $x2$ $algattrs:attrs$ in $x2$) $algattrs:attrs$ >>;
<:expression< let exception $uid:s$ : $list:lx$ -> $x2$ $algattrs:attrs$ in $x2$ >>;
<:expression< (let exception $uid:s$ : $list:lx$ -> $x2$ in $x2$) $algattrs:attrs$ >>;
<:expression< let exception $uid:s$ : $list:lx$ -> $x2$ in $x2$ >>;

<:expression< (let exception $uid:s$ : $list:lx$ $opt:ox2$ $algattrs:attrs$ in $x2$) $algattrs:attrs$ >>;
<:expression< let exception $uid:s$ : $list:lx$ $opt:ox2$ $algattrs:attrs$ in $x2$ >>;
<:expression< (let exception $uid:s$ : $list:lx$ $opt:ox2$ in $x2$) $algattrs:attrs$ >>;
<:expression< let exception $uid:s$ : $list:lx$ $opt:ox2$ in $x2$ >>;

<:expression< (let exception $uid:s$ : { $list:lx$} $opt:None$ $algattrs:attrs$ in $x2$) $algattrs:attrs$ >>;
<:expression< let exception $uid:s$ : { $list:lx$} $opt:None$ $algattrs:attrs$ in $x2$ >>;
<:expression< (let exception $uid:s$ : { $list:lx$} $opt:None$ in $x2$) $algattrs:attrs$ >>;
<:expression< let exception $uid:s$ : { $list:lx$} $opt:None$ in $x2$ >>;

<:expression< (let exception $uid:s$ : { $list:lx$} -> $x2$ $algattrs:attrs$ in $x2$) $algattrs:attrs$ >>;
<:expression< let exception $uid:s$ : { $list:lx$} -> $x2$ $algattrs:attrs$ in $x2$ >>;
<:expression< (let exception $uid:s$ : { $list:lx$} -> $x2$ in $x2$) $algattrs:attrs$ >>;
<:expression< let exception $uid:s$ : { $list:lx$} -> $x2$ in $x2$ >>;

<:expression< (let exception $uid:s$ : { $list:lx$} $opt:ox2$ $algattrs:attrs$ in $x2$) $algattrs:attrs$ >>;
<:expression< let exception $uid:s$ : { $list:lx$} $opt:ox2$ $algattrs:attrs$ in $x2$ >>;
<:expression< (let exception $uid:s$ : { $list:lx$} $opt:ox2$ in $x2$) $algattrs:attrs$ >>;
<:expression< let exception $uid:s$ : { $list:lx$} $opt:ox2$ in $x2$ >>;
#endif
{Parsetree.pexp_desc = Parsetree.Pexp_letexception {Parsetree.pext_name = {Location.txt = s; Location.loc = loc}; Parsetree.pext_kind = Parsetree.Pext_rebind {Location.txt = x; Location.loc = loc}; Parsetree.pext_loc = loc; Parsetree.pext_attributes = attrs} x2; Parsetree.pexp_loc = loc; Parsetree.pexp_loc_stack = []; Parsetree.pexp_attributes = attrs};
{Parsetree.pexp_desc = Parsetree.Pexp_letexception {Parsetree.pext_name = {Location.txt = s; Location.loc = loc}; Parsetree.pext_kind = Parsetree.Pext_rebind {Location.txt = x; Location.loc = loc}; Parsetree.pext_loc = loc; Parsetree.pext_attributes = attrs} x2; Parsetree.pexp_loc = loc; Parsetree.pexp_loc_stack = []; Parsetree.pexp_attributes = []};
<:expression< (let $excon:x1$ in $x2$) $algattrs:attrs$ >>;
<:expression< let $excon:x1$ in $x2$ >>;
<:expression< assert $x$ $algattrs:attrs$ >>;
<:expression< assert $x$ >>;
<:expression< lazy $x$ $algattrs:attrs$ >>;
<:expression< lazy $x$ >>;
{Parsetree.pexp_desc = Parsetree.Pexp_poly x1 None; Parsetree.pexp_loc = loc; Parsetree.pexp_loc_stack = []; Parsetree.pexp_attributes = attrs};
{Parsetree.pexp_desc = Parsetree.Pexp_poly x1 None; Parsetree.pexp_loc = loc; Parsetree.pexp_loc_stack = []; Parsetree.pexp_attributes = []};
{Parsetree.pexp_desc = Parsetree.Pexp_poly x1 (Some x2); Parsetree.pexp_loc = loc; Parsetree.pexp_loc_stack = []; Parsetree.pexp_attributes = attrs};
{Parsetree.pexp_desc = Parsetree.Pexp_poly x1 (Some x2); Parsetree.pexp_loc = loc; Parsetree.pexp_loc_stack = []; Parsetree.pexp_attributes = []};
{Parsetree.pexp_desc = Parsetree.Pexp_poly x1 ox2; Parsetree.pexp_loc = loc; Parsetree.pexp_loc_stack = []; Parsetree.pexp_attributes = attrs};
{Parsetree.pexp_desc = Parsetree.Pexp_poly x1 ox2; Parsetree.pexp_loc = loc; Parsetree.pexp_loc_stack = []; Parsetree.pexp_attributes = []};
<:expression< object $patt:x$ $list:lx$  end $algattrs:attrs$ >>;
<:expression< object $patt:x$ $list:lx$  end >>;
<:expression< (fun (type $lid:s$) -> $x2$) $algattrs:attrs$ >>;
<:expression< fun (type $lid:s$) -> $x2$ >>;
<:expression< (module $me$) $algattrs:attrs$ >>;
<:expression< (module $me$) >>;
{Parsetree.pexp_desc = Parsetree.Pexp_open {Parsetree.popen_expr = me; Parsetree.popen_override = x1; Parsetree.popen_loc = loc; Parsetree.popen_attributes = attrs} x2; Parsetree.pexp_loc = loc; Parsetree.pexp_loc_stack = []; Parsetree.pexp_attributes = attrs};
{Parsetree.pexp_desc = Parsetree.Pexp_open {Parsetree.popen_expr = me; Parsetree.popen_override = x1; Parsetree.popen_loc = loc; Parsetree.popen_attributes = attrs} x2; Parsetree.pexp_loc = loc; Parsetree.pexp_loc_stack = []; Parsetree.pexp_attributes = []};
<:expression< (let open $overrideflag:x1$ $me$ in $x2$) $algattrs:attrs$ >>;
<:expression< let open $overrideflag:x1$ $me$ in $x2$ >>;
<:expression< ($letop:x1$ $list:lx$ in $x2$) $algattrs:attrs$ >>;
<:expression< $letop:x1$ $list:lx$ in $x2$ >>;
<:expression< [% $attrid:s$ $list:x$] $algattrs:attrs$ >>;
<:expression< [% $attrid:s$ $list:x$] >>;
<:expression< [% $attrid:s$ : $list:x$] $algattrs:attrs$ >>;
<:expression< [% $attrid:s$ : $list:x$] >>;
<:expression< [% $attrid:s$ : $x$] $algattrs:attrs$ >>;
<:expression< [% $attrid:s$ : $x$] >>;
<:expression< [% $attrid:s$ ? $x1$] $algattrs:attrs$ >>;
<:expression< [% $attrid:s$ ? $x1$] >>;
<:expression< [% $attrid:s$ ? $x1$ when $x2$] $algattrs:attrs$ >>;
<:expression< [% $attrid:s$ ? $x1$ when $x2$] >>;
<:expression< [% $attrid:s$ ? $x1$ $expropt:ox2$] $algattrs:attrs$ >>;
<:expression< [% $attrid:s$ ? $x1$ $expropt:ox2$] >>;
{Parsetree.pexp_desc = Parsetree.Pexp_unreachable; Parsetree.pexp_loc = loc; Parsetree.pexp_loc_stack = []; Parsetree.pexp_attributes = attrs};
{Parsetree.pexp_desc = Parsetree.Pexp_unreachable; Parsetree.pexp_loc = loc; Parsetree.pexp_loc_stack = []; Parsetree.pexp_attributes = []};
[@@@"ocaml.text" "expression_desc";];
[@@@"ocaml.text" "case";];
<:case< $x1$ -> $x3$ >>;
<:case< $x1$ when $x2$ -> $x3$ >>;
<:case< $x1$ $wheno:ox2$ -> $x3$ >>;
[@@@"ocaml.text" "letop";];
[@@@"ocaml.text" "binding_op";];
<:binding_op< $lid:s$ $x2$ = $x3$ >>;
[@@@"ocaml.text" "value_description";];
[@@@"ocaml.text" "type_declaration";];
<:type_decl< $list:lxxx$ $lid:s$ = private $x4$ $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = private $x4$ $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $x4$ $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $x4$ $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $priv:x3$ $x4$ $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $priv:x3$ $x4$ $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = private $constructorlist:lx$ $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = private $constructorlist:lx$ $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $x4$ = private $constructorlist:lx$ $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $x4$ = private $constructorlist:lx$ $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $opt:ox4$ private $constructorlist:lx$ $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $opt:ox4$ private $constructorlist:lx$ $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $constructorlist:lx$ $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $constructorlist:lx$ $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $x4$ = $constructorlist:lx$ $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $x4$ = $constructorlist:lx$ $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $opt:ox4$ $constructorlist:lx$ $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $opt:ox4$ $constructorlist:lx$ $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $priv:x3$ $constructorlist:lx$ $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $priv:x3$ $constructorlist:lx$ $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $x4$ = $priv:x3$ $constructorlist:lx$ $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $x4$ = $priv:x3$ $constructorlist:lx$ $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $opt:ox4$ $priv:x3$ $constructorlist:lx$ $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $opt:ox4$ $priv:x3$ $constructorlist:lx$ $list:lxxl$ >>;

<:type_decl< $list:lxxx$ $lid:s$ = private { $list:lx$ } $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = private { $list:lx$ } $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $x4$ = private { $list:lx$ } $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $x4$ = private { $list:lx$ } $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $opt:ox4$ private { $list:lx$ } $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $opt:ox4$ private { $list:lx$ } $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = { $list:lx$ } $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = { $list:lx$ } $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $x4$ = { $list:lx$ } $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $x4$ = { $list:lx$ } $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $opt:ox4$ { $list:lx$ } $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $opt:ox4$ { $list:lx$ } $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $priv:x3$ { $list:lx$ } $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $priv:x3$ { $list:lx$ } $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $x4$ = $priv:x3$ { $list:lx$ } $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $x4$ = $priv:x3$ { $list:lx$ } $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $opt:ox4$ $priv:x3$ { $list:lx$ } $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $opt:ox4$ $priv:x3$ { $list:lx$ } $list:lxxl$ >>;

<:type_decl< $list:lxxx$ $lid:s$ = private .. $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = private .. $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $x4$ = private .. $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $x4$ = private .. $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $opt:ox4$ private .. $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $opt:ox4$ private .. $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = .. $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = .. $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $x4$ = .. $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $x4$ = .. $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $opt:ox4$ .. $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $opt:ox4$ .. $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $priv:x3$ .. $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $priv:x3$ .. $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $x4$ = $priv:x3$ .. $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $x4$ = $priv:x3$ .. $list:lxxl$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $opt:ox4$ $priv:x3$ .. $list:lxxl$ $itemattrs:attrs$ >>;
<:type_decl< $list:lxxx$ $lid:s$ = $opt:ox4$ $priv:x3$ .. $list:lxxl$ >>;

(*
<:type_decl< $list:lxxx$ $lid:s$ = $constructorlist:l$ $list:lxxl$ >>;
 *)
[@@@"ocaml.text" "type_kind";];
[@@@"ocaml.text" "label_declaration";];
<:label_declaration< $mutable:x2$ $lid:s$ : $x3$ $algattrs:attrs$ >>;
<:label_declaration< $mutable:x2$ $lid:s$ : $x3$ >>;
[@@@"ocaml.text" "constructor_declaration";];
#if OCAML_VERSION >= (4,14,0)
<:constructor_declaration< $uid:s$ : $list:lx$ . $list:lx$ $opt:None$ $algattrs:attrs$ >>;
<:constructor_declaration< $uid:s$ : $list:lx$ . $list:lx$ $opt:None$ >>;
<:constructor_declaration< $uid:s$ : $list:lx$ . $list:lx$ -> $x3$ $algattrs:attrs$ >>;
<:constructor_declaration< $uid:s$ : $list:lx$ . $list:lx$ -> $x3$ >>;
<:constructor_declaration< $uid:s$ : $list:lx$ . $list:lx$ $opt:ox3$ $algattrs:attrs$ >>;
<:constructor_declaration< $uid:s$ : $list:lx$ . $list:lx$ $opt:ox3$ >>;
<:constructor_declaration< $uid:s$ : $list:lx$ . { $list:lx$} $opt:None$ $algattrs:attrs$ >>;
<:constructor_declaration< $uid:s$ : $list:lx$ . { $list:lx$} $opt:None$ >>;
<:constructor_declaration< $uid:s$ : $list:lx$ . { $list:lx$} -> $x3$ $algattrs:attrs$ >>;
<:constructor_declaration< $uid:s$ : $list:lx$ . { $list:lx$} -> $x3$ >>;
<:constructor_declaration< $uid:s$ : $list:lx$ . { $list:lx$} $opt:ox3$ $algattrs:attrs$ >>;
<:constructor_declaration< $uid:s$ : $list:lx$ . { $list:lx$} $opt:ox3$ >>;
#else
<:constructor_declaration< $uid:s$ : $list:lx$ $opt:None$ $algattrs:attrs$ >> ;
<:constructor_declaration< $uid:s$ : $list:lx$ $opt:None$ >>;
<:constructor_declaration< $uid:s$ : $list:lx$ -> $x3$ $algattrs:attrs$ >> ;
<:constructor_declaration< $uid:s$ : $list:lx$ -> $x3$ >>;
<:constructor_declaration< $uid:s$ : $list:lx$ $opt:ox3$ $algattrs:attrs$ >> ;
<:constructor_declaration< $uid:s$ : $list:lx$ $opt:ox3$ >>;
<:constructor_declaration< $uid:s$ : { $list:lx$} $opt:None$ $algattrs:attrs$ >> ;
<:constructor_declaration< $uid:s$ : { $list:lx$} $opt:None$ >>;
<:constructor_declaration< $uid:s$ : { $list:lx$} -> $x3$ $algattrs:attrs$ >> ;
<:constructor_declaration< $uid:s$ : { $list:lx$} -> $x3$ >>;
<:constructor_declaration< $uid:s$ : { $list:lx$} $opt:ox3$ $algattrs:attrs$ >> ;
<:constructor_declaration< $uid:s$ : { $list:lx$} $opt:ox3$ >>;
#endif
[@@@"ocaml.text" "constructor_arguments";];
[@@@"ocaml.text" "type_extension";];
[@@@"ocaml.text" "extension_constructor";];
#if OCAML_VERSION >= (4,14,0)
<:extension_constructor< $uid:s$ : $list:lx$ . $list:lx$ $opt:None$ $algattrs:attrs$ >>;
<:extension_constructor< $uid:s$ : $list:lx$ . $list:lx$ $opt:None$ >>;
<:extension_constructor< $uid:s$ : $list:lx$ . $list:lx$ -> $x2$ $algattrs:attrs$ >>;
<:extension_constructor< $uid:s$ : $list:lx$ . $list:lx$ -> $x2$ >>;
<:extension_constructor< $uid:s$ : $list:lx$ . $list:lx$ $opt:ox2$ $algattrs:attrs$ >>;
<:extension_constructor< $uid:s$ : $list:lx$ . $list:lx$ $opt:ox2$ >>;
<:extension_constructor< $uid:s$ : $list:lx$ . { $list:lx$} $opt:None$ $algattrs:attrs$ >>;
<:extension_constructor< $uid:s$ : $list:lx$ . { $list:lx$} $opt:None$ >>;
<:extension_constructor< $uid:s$ : $list:lx$ . { $list:lx$} -> $x2$ $algattrs:attrs$ >>;
<:extension_constructor< $uid:s$ : $list:lx$ . { $list:lx$} -> $x2$ >>;
<:extension_constructor< $uid:s$ : $list:lx$ . { $list:lx$} $opt:ox2$ $algattrs:attrs$ >>;
<:extension_constructor< $uid:s$ : $list:lx$ . { $list:lx$} $opt:ox2$ >>;
<:extension_constructor< $uid:s$ = $longid:x$ $algattrs:attrs$ >>;
<:extension_constructor< $uid:s$ = $longid:x$ >>;
#else
<:extension_constructor< $uid:s$ : $list:lx$ $opt:None$ $algattrs:attrs$ >>;
<:extension_constructor< $uid:s$ : $list:lx$ $opt:None$ >>;
<:extension_constructor< $uid:s$ : $list:lx$ -> $x2$ $algattrs:attrs$ >>;
<:extension_constructor< $uid:s$ : $list:lx$ -> $x2$ >>;
<:extension_constructor< $uid:s$ : $list:lx$ $opt:ox2$ $algattrs:attrs$ >>;
<:extension_constructor< $uid:s$ : $list:lx$ $opt:ox2$ >>;
<:extension_constructor< $uid:s$ : { $list:lx$} $opt:None$ $algattrs:attrs$ >>;
<:extension_constructor< $uid:s$ : { $list:lx$} $opt:None$ >>;
<:extension_constructor< $uid:s$ : { $list:lx$} -> $x2$ $algattrs:attrs$ >>;
<:extension_constructor< $uid:s$ : { $list:lx$} -> $x2$ >>;
<:extension_constructor< $uid:s$ : { $list:lx$} $opt:ox2$ $algattrs:attrs$ >>;
<:extension_constructor< $uid:s$ : { $list:lx$} $opt:ox2$ >>;
<:extension_constructor< $uid:s$ = $longid:x$ $algattrs:attrs$ >>;
<:extension_constructor< $uid:s$ = $longid:x$ >>;
#endif
[@@@"ocaml.text" "type_exception";];
[@@@"ocaml.text" "extension_constructor_kind";];
[@@@"ocaml.text" "class_type";];
<:class_type< $list:lx$ $lid:s$ $algattrs:attrs$ >>;
<:class_type< $list:lx$ $lid:s$ >>;
<:class_type< $list:lx$ $longid:x$ . $lid:s$ $algattrs:attrs$ >> ;
<:class_type< $list:lx$ $longid:x$ . $lid:s$ >>;
<:class_type< object ($x$) $list:lx$ end $algattrs:attrs$ >> ;
<:class_type< object ($x$) $list:lx$ end >>;
{Parsetree.pcty_desc = Parsetree.Pcty_arrow x1 x2 ct; Parsetree.pcty_loc = loc; Parsetree.pcty_attributes = attrs};
<:class_type< $label:x1$ $x2$ -> $ct$ >>;
<:class_type< [% $attrid:s$ $list:x$] $algattrs:attrs$ >> ;
<:class_type< [% $attrid:s$ $list:x$] >>;
<:class_type< [% $attrid:s$ : $list:x$] $algattrs:attrs$ >> ;
<:class_type< [% $attrid:s$ : $list:x$] >>;
<:class_type< [% $attrid:s$ : $x$] $algattrs:attrs$ >> ;
<:class_type< [% $attrid:s$ : $x$] >>;
<:class_type< [% $attrid:s$ ? $x1$] $algattrs:attrs$ >> ;
<:class_type< [% $attrid:s$ ? $x1$] >>;
<:class_type< [% $attrid:s$ ? $x1$ when $x2$] $algattrs:attrs$ >> ;
<:class_type< [% $attrid:s$ ? $x1$ when $x2$] >>;
<:class_type< [% $attrid:s$ ? $x1$ $expropt:ox2$] $algattrs:attrs$ >> ;
<:class_type< [% $attrid:s$ ? $x1$ $expropt:ox2$] >>;
{Parsetree.pcty_desc = Parsetree.Pcty_open {Parsetree.popen_expr = {Location.txt = x; Location.loc = loc}; Parsetree.popen_override = x2; Parsetree.popen_loc = loc; Parsetree.popen_attributes = attrs} ct; Parsetree.pcty_loc = loc; Parsetree.pcty_attributes = attrs};
{Parsetree.pcty_desc = Parsetree.Pcty_open {Parsetree.popen_expr = {Location.txt = x; Location.loc = loc}; Parsetree.popen_override = x2; Parsetree.popen_loc = loc; Parsetree.popen_attributes = attrs} ct; Parsetree.pcty_loc = loc; Parsetree.pcty_attributes = []};
<:class_type< let open $overrideflag:x2$ $algattrs:attrs$ $longid:x$ in $ct$ >> ;
<:class_type< let open $overrideflag:x2$ $longid:x$ in $ct$ >>;
[@@@"ocaml.text" "class_type_desc";];
[@@@"ocaml.text" "class_signature";];
[@@@"ocaml.text" "class_type_field";];
<:class_type_field< inherit $ct$ $itemattrs:attrs$ >>;
<:class_type_field< inherit $ct$ >>;
<:class_type_field< val $mutable:xxxxf2$ $virtual:xxxxf3$ $lid:x$ : $xxxxf4$ $itemattrs:attrs$ >> ;
<:class_type_field< val $mutable:xxxxf2$ $virtual:xxxxf3$ $lid:x$ : $xxxxf4$ >>;
<:class_type_field< method $priv:xxxxf2$ $virtual:xxxxf3$ $lid:x$ : $xxxxf4$ $itemattrs:attrs$ >> ;
<:class_type_field< method $priv:xxxxf2$ $virtual:xxxxf3$ $lid:x$ : $xxxxf4$ >>;
<:class_type_field< constraint $xxf1$ = $xxf2$ $itemattrs:attrs$ >> ;
<:class_type_field< constraint $xxf1$ = $xxf2$ >>;
{Parsetree.pctf_desc = Parsetree.Pctf_attribute {Parsetree.attr_name = {Location.txt = s; Location.loc = loc}; Parsetree.attr_payload = Parsetree.PStr x; Parsetree.attr_loc = loc}; Parsetree.pctf_loc = loc; Parsetree.pctf_attributes = attrs};
<:class_type_field< [@@@ $attrid:s$ $list:x$] >> ;
{Parsetree.pctf_desc = Parsetree.Pctf_attribute {Parsetree.attr_name = {Location.txt = s; Location.loc = loc}; Parsetree.attr_payload = Parsetree.PSig x; Parsetree.attr_loc = loc}; Parsetree.pctf_loc = loc; Parsetree.pctf_attributes = attrs};
<:class_type_field< [@@@ $attrid:s$ : $list:x$] >> ;
{Parsetree.pctf_desc = Parsetree.Pctf_attribute {Parsetree.attr_name = {Location.txt = s; Location.loc = loc}; Parsetree.attr_payload = Parsetree.PTyp x; Parsetree.attr_loc = loc}; Parsetree.pctf_loc = loc; Parsetree.pctf_attributes = attrs};
<:class_type_field< [@@@ $attrid:s$ : $x$] >> ;
{Parsetree.pctf_desc = Parsetree.Pctf_attribute {Parsetree.attr_name = {Location.txt = s; Location.loc = loc}; Parsetree.attr_payload = Parsetree.PPat x1 None; Parsetree.attr_loc = loc}; Parsetree.pctf_loc = loc; Parsetree.pctf_attributes = attrs};
<:class_type_field< [@@@ $attrid:s$ ? $x1$] >> ;
{Parsetree.pctf_desc = Parsetree.Pctf_attribute {Parsetree.attr_name = {Location.txt = s; Location.loc = loc}; Parsetree.attr_payload = Parsetree.PPat x1 (Some x2); Parsetree.attr_loc = loc}; Parsetree.pctf_loc = loc; Parsetree.pctf_attributes = attrs};
<:class_type_field< [@@@ $attrid:s$ ? $x1$ when $x2$] >> ;
{Parsetree.pctf_desc = Parsetree.Pctf_attribute {Parsetree.attr_name = {Location.txt = s; Location.loc = loc}; Parsetree.attr_payload = Parsetree.PPat x1 ox2; Parsetree.attr_loc = loc}; Parsetree.pctf_loc = loc; Parsetree.pctf_attributes = attrs};
<:class_type_field< [@@@ $attrid:s$ ? $x1$ $expropt:ox2$] >> ;
<:class_type_field< [%% $attrid:s$ $list:x$] $itemattrs:attrs$ >> ;
<:class_type_field< [%% $attrid:s$ $list:x$] >>;
<:class_type_field< [%% $attrid:s$ : $list:x$] $itemattrs:attrs$ >> ;
<:class_type_field< [%% $attrid:s$ : $list:x$] >>;
<:class_type_field< [%% $attrid:s$ : $x$] $itemattrs:attrs$ >> ;
<:class_type_field< [%% $attrid:s$ : $x$] >>;
<:class_type_field< [%% $attrid:s$ ? $x1$] $itemattrs:attrs$ >> ;
<:class_type_field< [%% $attrid:s$ ? $x1$] >>;
<:class_type_field< [%% $attrid:s$ ? $x1$ when $x2$] $itemattrs:attrs$ >> ;
<:class_type_field< [%% $attrid:s$ ? $x1$ when $x2$] >>;
<:class_type_field< [%% $attrid:s$ ? $x1$ $expropt:ox2$] $itemattrs:attrs$ >> ;
<:class_type_field< [%% $attrid:s$ ? $x1$ $expropt:ox2$] >>;
[@@@"ocaml.text" "class_type_field_desc";];
[@@@"ocaml.text" "class_infos";];
[@@@"ocaml.text" "class_description";];
<:class_description< class $virtual:x1$ $list:lxxx$ $lid:s$ : $ct$ $itemattrs:attrs$ >>;
<:class_description< class $virtual:x1$ $list:lxxx$ $lid:s$ : $ct$ >>;
[@@@"ocaml.text" "class_type_declaration";];
<:class_description< class $virtual:x1$ $list:lxxx$ $lid:s$ : $ct$ $itemattrs:attrs$ >>;
<:class_description< class $virtual:x1$ $list:lxxx$ $lid:s$ : $ct$ >>;
[@@@"ocaml.text" "class_expr";];
<:class_expr< $list:lx$ $lid:s$ $algattrs:attrs$ >>;
<:class_expr< $list:lx$ $lid:s$ >>;
<:class_expr< $list:lx$ $longid:x$ . $lid:s$ $algattrs:attrs$ >> ;
<:class_expr< $list:lx$ $longid:x$ . $lid:s$ >>;
<:class_expr< object $patt:x$ $list:lx$ end $algattrs:attrs$ >> ;
<:class_expr< object $patt:x$ $list:lx$ end >>;
<:class_expr< (fun $label:x1$ ( $x3$ ) -> $ce$) $algattrs:attrs$ >> ;
<:class_expr< fun $label:x1$ ( $x3$ ) -> $ce$ >>;
<:class_expr< (fun $label:x1$ ( $x3$ = $x2$ ) -> $ce$) $algattrs:attrs$ >> ;
<:class_expr< fun $label:x1$ ( $x3$ = $x2$ ) -> $ce$ >>;
<:class_expr< (fun $label:x1$ ( $x3$ $expropt:ox2$ ) -> $ce$) $algattrs:attrs$ >> ;
<:class_expr< fun $label:x1$ ( $x3$ $expropt:ox2$ ) -> $ce$ >>;
<:class_expr< $ce$ $list:lxx$ $algattrs:attrs$ >> ;
<:class_expr< $ce$ $list:lxx$ >>;
<:class_expr< (let $recflag:x$ $list:lx$ in $ce$) $algattrs:attrs$ >> ;
<:class_expr< let $recflag:x$ $list:lx$ in $ce$ >>;
<:class_expr< ( $ce$ : $ct$ ) $algattrs:attrs$ >> ;
<:class_expr< ( $ce$ : $ct$ ) >>;
<:class_expr< [% $attrid:s$ $list:x$] $algattrs:attrs$ >> ;
<:class_expr< [% $attrid:s$ $list:x$] >>;
<:class_expr< [% $attrid:s$ : $list:x$] $algattrs:attrs$ >> ;
<:class_expr< [% $attrid:s$ : $list:x$] >>;
<:class_expr< [% $attrid:s$ : $x$] $algattrs:attrs$ >> ;
<:class_expr< [% $attrid:s$ : $x$] >>;
<:class_expr< [% $attrid:s$ ? $x1$] $algattrs:attrs$ >> ;
<:class_expr< [% $attrid:s$ ? $x1$] >>;
<:class_expr< [% $attrid:s$ ? $x1$ when $x2$] $algattrs:attrs$ >> ;
<:class_expr< [% $attrid:s$ ? $x1$ when $x2$] >>;
<:class_expr< [% $attrid:s$ ? $x1$ $expropt:ox2$] $algattrs:attrs$ >> ;
<:class_expr< [% $attrid:s$ ? $x1$ $expropt:ox2$] >>;
{Parsetree.pcl_desc = Parsetree.Pcl_open {Parsetree.popen_expr = {Location.txt = x; Location.loc = loc}; Parsetree.popen_override = x2; Parsetree.popen_loc = loc; Parsetree.popen_attributes = attrs} ce; Parsetree.pcl_loc = loc; Parsetree.pcl_attributes = attrs};
{Parsetree.pcl_desc = Parsetree.Pcl_open {Parsetree.popen_expr = {Location.txt = x; Location.loc = loc}; Parsetree.popen_override = x2; Parsetree.popen_loc = loc; Parsetree.popen_attributes = attrs} ce; Parsetree.pcl_loc = loc; Parsetree.pcl_attributes = []};
<:class_expr< (let open $overrideflag:x2$ $longid:x$ in $ce$) $algattrs:attrs$ >> ;
<:class_expr< let open $overrideflag:x2$ $longid:x$ in $ce$ >>;
[@@@"ocaml.text" "class_expr_desc";];
[@@@"ocaml.text" "class_structure";];
[@@@"ocaml.text" "class_field";];
<:class_field< inherit $overrideflag:x1$ $ce$ $itemattrs:attrs$ >> ;
<:class_field< inherit $overrideflag:x1$ $ce$ >>;
<:class_field< inherit $overrideflag:x1$ $ce$ as $lid:s$ $itemattrs:attrs$ >> ;
<:class_field< inherit $overrideflag:x1$ $ce$ as $lid:s$ >>;
<:class_field< inherit $overrideflag:x1$ $ce$ $opt:ox2$ $itemattrs:attrs$ >> ;
<:class_field< inherit $overrideflag:x1$ $ce$ $opt:ox2$ >>;
<:class_field< val $mutable:xxxf2$ $lid:x$ : $x$ $itemattrs:attrs$ >> ;
<:class_field< val $mutable:xxxf2$ $lid:x$ : $x$ >>;
<:class_field< val $overrideflag:x1$ $mutable:xxxf2$ $lid:x$ = $x2$ $itemattrs:attrs$ >> ;
<:class_field< val $overrideflag:x1$ $mutable:xxxf2$ $lid:x$ = $x2$ >>;
<:class_field< method $priv:xxxf2$ $lid:x$ : $x$ $itemattrs:attrs$ >> ;
<:class_field< method $priv:xxxf2$ $lid:x$ : $x$ >>;
<:class_field< method $overrideflag:x1$ $priv:xxxf2$ $lid:x$ = $x2$ $itemattrs:attrs$ >> ;
<:class_field< method $overrideflag:x1$ $priv:xxxf2$ $lid:x$ = $x2$ >>;
<:class_field< constraint $xxf1$ = $xxf2$ $itemattrs:attrs$ >> ;
<:class_field< constraint $xxf1$ = $xxf2$ >>;
<:class_field< initializer $x$ $itemattrs:attrs$ >> ;
<:class_field< initializer $x$ >>;
{Parsetree.pcf_desc = Parsetree.Pcf_attribute {Parsetree.attr_name = {Location.txt = s; Location.loc = loc}; Parsetree.attr_payload = Parsetree.PStr x; Parsetree.attr_loc = loc}; Parsetree.pcf_loc = loc; Parsetree.pcf_attributes = attrs};
<:class_field< [@@@ $attrid:s$ $list:x$] >>;
{Parsetree.pcf_desc = Parsetree.Pcf_attribute {Parsetree.attr_name = {Location.txt = s; Location.loc = loc}; Parsetree.attr_payload = Parsetree.PSig x; Parsetree.attr_loc = loc}; Parsetree.pcf_loc = loc; Parsetree.pcf_attributes = attrs};
<:class_field< [@@@ $attrid:s$ : $list:x$] >>;
{Parsetree.pcf_desc = Parsetree.Pcf_attribute {Parsetree.attr_name = {Location.txt = s; Location.loc = loc}; Parsetree.attr_payload = Parsetree.PTyp x; Parsetree.attr_loc = loc}; Parsetree.pcf_loc = loc; Parsetree.pcf_attributes = attrs};
<:class_field< [@@@ $attrid:s$ : $x$] >>;
{Parsetree.pcf_desc = Parsetree.Pcf_attribute {Parsetree.attr_name = {Location.txt = s; Location.loc = loc}; Parsetree.attr_payload = Parsetree.PPat x1 None; Parsetree.attr_loc = loc}; Parsetree.pcf_loc = loc; Parsetree.pcf_attributes = attrs};
<:class_field< [@@@ $attrid:s$ ? $x1$] >>;
{Parsetree.pcf_desc = Parsetree.Pcf_attribute {Parsetree.attr_name = {Location.txt = s; Location.loc = loc}; Parsetree.attr_payload = Parsetree.PPat x1 (Some x2); Parsetree.attr_loc = loc}; Parsetree.pcf_loc = loc; Parsetree.pcf_attributes = attrs};
<:class_field< [@@@ $attrid:s$ ? $x1$ when $x2$] >>;
{Parsetree.pcf_desc = Parsetree.Pcf_attribute {Parsetree.attr_name = {Location.txt = s; Location.loc = loc}; Parsetree.attr_payload = Parsetree.PPat x1 ox2; Parsetree.attr_loc = loc}; Parsetree.pcf_loc = loc; Parsetree.pcf_attributes = attrs};
<:class_field< [@@@ $attrid:s$ ? $x1$ $expropt:ox2$] >>;
<:class_field< [%% $attrid:s$ $list:x$] $itemattrs:attrs$ >> ;
<:class_field< [%% $attrid:s$ $list:x$] >>;
<:class_field< [%% $attrid:s$ : $list:x$] $itemattrs:attrs$ >> ;
<:class_field< [%% $attrid:s$ : $list:x$] >>;
<:class_field< [%% $attrid:s$ : $x$] $itemattrs:attrs$ >> ;
<:class_field< [%% $attrid:s$ : $x$] >>;
<:class_field< [%% $attrid:s$ ? $x1$] $itemattrs:attrs$ >> ;
<:class_field< [%% $attrid:s$ ? $x1$] >>;
<:class_field< [%% $attrid:s$ ? $x1$ when $x2$] $itemattrs:attrs$ >> ;
<:class_field< [%% $attrid:s$ ? $x1$ when $x2$] >>;
<:class_field< [%% $attrid:s$ ? $x1$ $expropt:ox2$] $itemattrs:attrs$ >> ;
<:class_field< [%% $attrid:s$ ? $x1$ $expropt:ox2$] >>;
[@@@"ocaml.text" "class_field_desc";];
[@@@"ocaml.text" "class_field_kind";];
[@@@"ocaml.text" "class_declaration";];
[@@@"ocaml.text" "module_type";];
<:module_type< $lid:s$ $algattrs:attrs$ >>;
<:module_type< $lid:s$ >>;
<:module_type< $longid:x$ . $lid:s$ $algattrs:attrs$ >> ;
<:module_type< $longid:x$ . $lid:s$ >>;
<:module_type< sig $list:x$ end $algattrs:attrs$ >> ;
<:module_type< sig $list:x$ end >>;
<:module_type< (functor $opt:x$ -> $mt$) $algattrs:attrs$ >> ;
<:module_type< functor $opt:x$ -> $mt$ >>;
<:module_type< $mt$ with $list:lx$ $algattrs:attrs$ >> ;
<:module_type< $mt$ with $list:lx$ >>;
<:module_type< (module type of $me$) $algattrs:attrs$ >> ;
<:module_type< module type of $me$ >>;
<:module_type< [% $attrid:s$ $list:x$] $algattrs:attrs$ >> ;
<:module_type< [% $attrid:s$ $list:x$] >>;
<:module_type< [% $attrid:s$ : $list:x$] $algattrs:attrs$ >> ;
<:module_type< [% $attrid:s$ : $list:x$] >>;
<:module_type< [% $attrid:s$ : $x$] $algattrs:attrs$ >> ;
<:module_type< [% $attrid:s$ : $x$] >>;
<:module_type< [% $attrid:s$ ? $x1$] $algattrs:attrs$ >> ;
<:module_type< [% $attrid:s$ ? $x1$] >>;
<:module_type< [% $attrid:s$ ? $x1$ when $x2$] $algattrs:attrs$ >> ;
<:module_type< [% $attrid:s$ ? $x1$ when $x2$] >>;
<:module_type< [% $attrid:s$ ? $x1$ $expropt:ox2$] $algattrs:attrs$ >> ;
<:module_type< [% $attrid:s$ ? $x1$ $expropt:ox2$] >>;
<:module_type< (module $longid:x$) $algattrs:attrs$ >> ;
<:module_type< (module $longid:x$) >>;
[@@@"ocaml.text" "module_type_desc";];
[@@@"ocaml.text" "functor_parameter";];
<:functor_parameter< () >>;
<:functor_parameter< ( _ : $mt$ ) >>;
<:functor_parameter< ( $uid:s$ : $mt$ ) >>;
<:functor_parameter< ( $opt:os$ : $mt$ ) >>;
[@@@"ocaml.text" "signature";];
[@@@"ocaml.text" "signature_item";];
<:signature_item< external $lid:s$ : $x2$ = $list:ls$ $itemattrs:attrs$ >>;
<:signature_item< external $lid:s$ : $x2$ = $list:ls$ >>;
<:signature_item< val $lid:s$ : $x2$ >>;
<:signature_item< type $nonrecflag:x$ $list:lx$ >>;
<:signature_item< typesubst $list:lx$ >>;
<:signature_item< type $list:lxxx$ $lid:s$ += $priv:x2$ $list:lx$ $itemattrs:attrs$ >> ;
<:signature_item< type $list:lxxx$ $lid:s$ += $priv:x2$ $list:lx$ >>;
<:signature_item< type $list:lxxx$ $longid:x$ . $lid:s$ += $priv:x2$ $list:lx$ $itemattrs:attrs$ >> ;
<:signature_item< type $list:lxxx$ $longid:x$ . $lid:s$ += $priv:x2$ $list:lx$ >>;
<:signature_item< type $list:lxxx$ $longlid:x$ += $priv:x2$ $list:lx$ $itemattrs:attrs$ >> ;
<:signature_item< type $list:lxxx$ $longlid:x$ += $priv:x2$ $list:lx$ >>;
#if OCAML_VERSION >= (4,14,0)
<:signature_item< exception $uid:s$ : $list:lx$ . $list:lx$ $opt:None$ $algattrs:attrs$ $itemattrs:attrs$ >> ;
<:signature_item< exception $uid:s$ : $list:lx$ . $list:lx$ $opt:None$ $algattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ . $list:lx$ $opt:None$ $itemattrs:attrs$ >> ;
<:signature_item< exception $uid:s$ : $list:lx$ . $list:lx$ $opt:None$ >>;

<:signature_item< exception $uid:s$ : $list:lx$ . $list:lx$ -> $x2$ $algattrs:attrs$ $itemattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ . $list:lx$ -> $x2$ $algattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ . $list:lx$ -> $x2$ $itemattrs:attrs$ >>;

<:signature_item< exception $uid:s$ : $list:lx$ . $list:lx$ -> $x2$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ . $list:lx$ $opt:ox2$ $algattrs:attrs$ $itemattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ . $list:lx$ $opt:ox2$ $algattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ . $list:lx$ $opt:ox2$ $itemattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ . $list:lx$ $opt:ox2$ >>;

<:signature_item< exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:None$ $algattrs:attrs$ $itemattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:None$ $algattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:None$ $itemattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:None$ >>;

<:signature_item< exception $uid:s$ : $list:lx$ . { $list:lx$} -> $x2$ $algattrs:attrs$ $itemattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ . { $list:lx$} -> $x2$ $algattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ . { $list:lx$} -> $x2$ $itemattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ . { $list:lx$} -> $x2$ >>;

<:signature_item< exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:ox2$ $algattrs:attrs$ $itemattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:ox2$ $algattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:ox2$ $itemattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:ox2$ >>;
#else
<:signature_item< exception $uid:s$ : $list:lx$ $opt:None$ $algattrs:attrs$ $itemattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ $opt:None$ $algattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ $opt:None$ $itemattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ $opt:None$ >>;

<:signature_item< exception $uid:s$ : $list:lx$ -> $x2$ $algattrs:attrs$ $itemattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ -> $x2$ $algattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ -> $x2$ $itemattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ -> $x2$ >>;

<:signature_item< exception $uid:s$ : $list:lx$ $opt:ox2$ $algattrs:attrs$ $itemattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ $opt:ox2$ $algattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ $opt:ox2$ $itemattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : $list:lx$ $opt:ox2$ >>;

<:signature_item< exception $uid:s$ : { $list:lx$} $opt:None$ $algattrs:attrs$ $itemattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : { $list:lx$} $opt:None$ $algattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : { $list:lx$} $opt:None$ $itemattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : { $list:lx$} $opt:None$ >>;

<:signature_item< exception $uid:s$ : { $list:lx$} -> $x2$ $algattrs:attrs$ $itemattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : { $list:lx$} -> $x2$ $algattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : { $list:lx$} -> $x2$ $itemattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : { $list:lx$} -> $x2$ >>;

<:signature_item< exception $uid:s$ : { $list:lx$} $opt:ox2$ $algattrs:attrs$ $itemattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : { $list:lx$} $opt:ox2$ $algattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : { $list:lx$} $opt:ox2$ $itemattrs:attrs$ >>;
<:signature_item< exception $uid:s$ : { $list:lx$} $opt:ox2$ >>;
#endif
<:signature_item< module _ : $mt$ $itemattrs:attrs$ >> ;
<:signature_item< module _ : $mt$ >>;
<:signature_item< module $uid:s$ : $mt$ $itemattrs:attrs$ >> ;
<:signature_item< module $uid:s$ : $mt$ >>;
<:signature_item< module $opt:os$ : $mt$ $itemattrs:attrs$ >> ;
<:signature_item< module $opt:os$ : $mt$ >>;
<:signature_item< module $uid:s$ := $longid:x$ $itemattrs:attrs$ >> ;
<:signature_item< module $uid:s$ := $longid:x$ >>;
<:signature_item< module rec $list:lx$ >>;
<:signature_item< module type $uid:s$ $itemattrs:attrs$ >> ;
<:signature_item< module type $uid:s$ >>;
<:signature_item< module type $uid:s$ = $mt$ $itemattrs:attrs$ >> ;
<:signature_item< module type $uid:s$ = $mt$ >>;
<:signature_item< module type $uid:s$ $opt:omt$ $itemattrs:attrs$ >> ;
<:signature_item< module type $uid:s$ $opt:omt$ >>;
#if OCAML_VERSION >= (4,13,0)
{Parsetree.psig_desc = Parsetree.Psig_modtypesubst {Parsetree.pmtd_name = {Location.txt = s; Location.loc = loc}; Parsetree.pmtd_type = None; Parsetree.pmtd_attributes = attrs; Parsetree.pmtd_loc = loc}; Parsetree.psig_loc = loc};
<:signature_item< module type $uid:s$ := $mt$ $itemattrs:attrs$ >>;
<:signature_item< module type $uid:s$ := $mt$ >>;
{Parsetree.psig_desc = Parsetree.Psig_modtypesubst {Parsetree.pmtd_name = {Location.txt = s; Location.loc = loc}; Parsetree.pmtd_type = omt; Parsetree.pmtd_attributes = attrs; Parsetree.pmtd_loc = loc}; Parsetree.psig_loc = loc};
#endif
<:signature_item< open $overrideflag:x2$ $longid:x$ $itemattrs:attrs$ >>;
<:signature_item< open $overrideflag:x2$ $longid:x$ >>;
<:signature_item< include $mt$ $itemattrs:attrs$ >> ;
<:signature_item< include $mt$ >>;
<:signature_item< class $classdesclist:lx$ >>;
<:signature_item< class type $classtypelist:lx$ >>;
<:signature_item< [@@@ $attrid:s$ $list:x$] >>;
<:signature_item< [@@@ $attrid:s$ : $list:x$] >>;
<:signature_item< [@@@ $attrid:s$ : $x$] >>;
<:signature_item< [@@@ $attrid:s$ ? $x1$] >>;
<:signature_item< [@@@ $attrid:s$ ? $x1$ when $x2$] >>;
<:signature_item< [@@@ $attrid:s$ ? $x1$ $expropt:ox2$] >>;
<:signature_item< [%% $attrid:s$ $list:x$] $itemattrs:attrs$ >> ;
<:signature_item< [%% $attrid:s$ $list:x$] >>;
<:signature_item< [%% $attrid:s$ : $list:x$] $itemattrs:attrs$ >> ;
<:signature_item< [%% $attrid:s$ : $list:x$] >>;
<:signature_item< [%% $attrid:s$ : $x$] $itemattrs:attrs$ >> ;
<:signature_item< [%% $attrid:s$ : $x$] >>;
<:signature_item< [%% $attrid:s$ ? $x1$] $itemattrs:attrs$ >> ;
<:signature_item< [%% $attrid:s$ ? $x1$] >>;
<:signature_item< [%% $attrid:s$ ? $x1$ when $x2$] $itemattrs:attrs$ >> ;
<:signature_item< [%% $attrid:s$ ? $x1$ when $x2$] >>;
<:signature_item< [%% $attrid:s$ ? $x1$ $expropt:ox2$] $itemattrs:attrs$ >> ;
<:signature_item< [%% $attrid:s$ ? $x1$ $expropt:ox2$] >>;
[@@@"ocaml.text" "signature_item_desc";];
[@@@"ocaml.text" "module_declaration";];
<:module_declaration< module _ : $mt$ $itemattrs:attrs$ >> ;
<:module_declaration< module _ : $mt$ >>;
<:module_declaration< module $uid:s$ : $mt$ $itemattrs:attrs$ >> ;
<:module_declaration< module $uid:s$ : $mt$ >>;
<:module_declaration< module $opt:os$ : $mt$ $itemattrs:attrs$ >> ;
<:module_declaration< module $opt:os$ : $mt$ >>;
[@@@"ocaml.text" "module_substitution";];
[@@@"ocaml.text" "module_type_declaration";];
[@@@"ocaml.text" "open_infos";];
[@@@"ocaml.text" "open_description";];
[@@@"ocaml.text" "open_declaration";];
[@@@"ocaml.text" "include_infos";];
[@@@"ocaml.text" "include_description";];
[@@@"ocaml.text" "include_declaration";];
[@@@"ocaml.text" "with_constraint";];
<:with_constraint< type $lid:s$ = $typedecl:x2$ >>;
<:with_constraint< type $longid:x$ . $lid:s$ = $typedecl:x2$ >>;
<:with_constraint< module $longid:x$ = $longid:x$ >>;
#if OCAML_VERSION >= (4,13,0)
<:with_constraint< module type $lid:s$ = $mt$ >>;
<:with_constraint< module type $longid:x$ . $lid:s$ = $mt$ >>;
#endif
#if OCAML_VERSION >= (4,13,0)
<:with_constraint< module type $lid:s$ := $mt$ >>;
<:with_constraint< module type $longid:x$ . $lid:s$ := $mt$ >>;
#endif
<:with_constraint< type $lid:s$ := $typedecl:x2$ >>;
<:with_constraint< type $longid:x$ . $lid:s$ := $typedecl:x2$ >>;
<:with_constraint< module $longid:x$ := $longid:x$ >>;
[@@@"ocaml.text" "module_expr";];
<:module_expr< $longid:x$ $algattrs:attrs$ >> ;
<:module_expr< $longid:x$ >>;
<:module_expr< struct $list:x$ end $algattrs:attrs$ >> ;
<:module_expr< struct $list:x$ end >>;
<:module_expr< (functor $opt:x$ -> $me$) $algattrs:attrs$ >> ;
<:module_expr< functor $opt:x$ -> $me$ >>;
<:module_expr< $me1$( $me2$ ) $algattrs:attrs$ >> ;
<:module_expr< $me1$( $me2$ ) >>;
<:module_expr< ( $me$ : $mt$ ) $algattrs:attrs$ >> ;
<:module_expr< ( $me$ : $mt$ ) >>;
<:module_expr< ( val $x$ ) $algattrs:attrs$ >> ;
<:module_expr< ( val $x$ ) >>;
<:module_expr< [% $attrid:s$ $list:x$] $algattrs:attrs$ >> ;
<:module_expr< [% $attrid:s$ $list:x$] >>;
<:module_expr< [% $attrid:s$ : $list:x$] $algattrs:attrs$ >> ;
<:module_expr< [% $attrid:s$ : $list:x$] >>;
<:module_expr< [% $attrid:s$ : $x$] $algattrs:attrs$ >> ;
<:module_expr< [% $attrid:s$ : $x$] >>;
<:module_expr< [% $attrid:s$ ? $x1$] $algattrs:attrs$ >> ;
<:module_expr< [% $attrid:s$ ? $x1$] >>;
<:module_expr< [% $attrid:s$ ? $x1$ when $x2$] $algattrs:attrs$ >> ;
<:module_expr< [% $attrid:s$ ? $x1$ when $x2$] >>;
<:module_expr< [% $attrid:s$ ? $x1$ $expropt:ox2$] $algattrs:attrs$ >> ;
<:module_expr< [% $attrid:s$ ? $x1$ $expropt:ox2$] >>;
[@@@"ocaml.text" "module_expr_desc";];
[@@@"ocaml.text" "structure";];
[@@@"ocaml.text" "structure_item";];
<:structure_item< let $recflag:x$ $list:lx$ >>;
<:structure_item< external $lid:s$ : $x2$ = $list:ls$ $itemattrs:attrs$ >> ;
<:structure_item< external $lid:s$ : $x2$ = $list:ls$ >>;
<:structure_item< type $nonrecflag:x$ $list:lx$ >>;
<:structure_item< type $list:lxxx$ $lid:s$ += $priv:x2$ $list:lx$ $itemattrs:attrs$ >> ;
<:structure_item< type $list:lxxx$ $lid:s$ += $priv:x2$ $list:lx$ >>;
<:structure_item< type $list:lxxx$ $longid:x$ . $lid:s$ += $priv:x2$ $list:lx$ $itemattrs:attrs$ >> ;
<:structure_item< type $list:lxxx$ $longid:x$ . $lid:s$ += $priv:x2$ $list:lx$ >>;
<:structure_item< type $list:lxxx$ $longlid:x$ += $priv:x2$ $list:lx$ $itemattrs:attrs$ >> ;
<:structure_item< type $list:lxxx$ $longlid:x$ += $priv:x2$ $list:lx$ >>;
#if OCAML_VERSION >= (4,14,0)
<:structure_item< exception $uid:s$ : $list:lx$ . $list:lx$ $opt:None$ $algattrs:attrs$ $itemattrs:attrs$ >> ;
<:structure_item< exception $uid:s$ : $list:lx$ . $list:lx$ $opt:None$ $algattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : $list:lx$ . $list:lx$ $opt:None$ $itemattrs:attrs$ >> ;
<:structure_item< exception $uid:s$ : $list:lx$ . $list:lx$ $opt:None$ >>;

<:structure_item< exception $uid:s$ : $list:lx$ . $list:lx$ -> $x2$ $algattrs:attrs$ $itemattrs:attrs$ >> ;
<:structure_item< exception $uid:s$ : $list:lx$ . $list:lx$ -> $x2$ $algattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : $list:lx$ . $list:lx$ -> $x2$ $itemattrs:attrs$ >> ;
<:structure_item< exception $uid:s$ : $list:lx$ . $list:lx$ -> $x2$ >>;

<:structure_item< exception $uid:s$ : $list:lx$ . $list:lx$ $opt:ox2$ $algattrs:attrs$ $itemattrs:attrs$ >> ;
<:structure_item< exception $uid:s$ : $list:lx$ . $list:lx$ $opt:ox2$ $algattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : $list:lx$ . $list:lx$ $opt:ox2$ $itemattrs:attrs$ >> ;
<:structure_item< exception $uid:s$ : $list:lx$ . $list:lx$ $opt:ox2$ >>;

<:structure_item< exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:None$ $algattrs:attrs$ $itemattrs:attrs$ >> ;
<:structure_item< exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:None$ $algattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:None$ $itemattrs:attrs$ >> ;
<:structure_item< exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:None$ >>;

<:structure_item< exception $uid:s$ : $list:lx$ . { $list:lx$} -> $x2$ $algattrs:attrs$ $itemattrs:attrs$ >> ;
<:structure_item< exception $uid:s$ : $list:lx$ . { $list:lx$} -> $x2$ $algattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : $list:lx$ . { $list:lx$} -> $x2$ $itemattrs:attrs$ >> ;
<:structure_item< exception $uid:s$ : $list:lx$ . { $list:lx$} -> $x2$ >>;

<:structure_item< exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:ox2$ $algattrs:attrs$ $itemattrs:attrs$ >> ;
<:structure_item< exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:ox2$ $algattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:ox2$ $itemattrs:attrs$ >> ;
<:structure_item< exception $uid:s$ : $list:lx$ . { $list:lx$} $opt:ox2$ >>;

<:structure_item< exception $uid:s$ = $longid:x$ $algattrs:attrs$ $itemattrs:attrs$ >> ;
<:structure_item< exception $uid:s$ = $longid:x$ $algattrs:attrs$ >>;
<:structure_item< exception $uid:s$ = $longid:x$ $itemattrs:attrs$ >> ;
<:structure_item< exception $uid:s$ = $longid:x$ >>;
#else
<:structure_item< exception $uid:s$ : $list:lx$ $opt:None$ $algattrs:attrs$ $itemattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : $list:lx$ $opt:None$ $algattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : $list:lx$ $opt:None$ $itemattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : $list:lx$ $opt:None$ >>;

<:structure_item< exception $uid:s$ : $list:lx$ -> $x2$ $algattrs:attrs$ $itemattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : $list:lx$ -> $x2$ $algattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : $list:lx$ -> $x2$ $itemattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : $list:lx$ -> $x2$ >>;

<:structure_item< exception $uid:s$ : $list:lx$ $opt:ox2$ $algattrs:attrs$ $itemattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : $list:lx$ $opt:ox2$ $algattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : $list:lx$ $opt:ox2$ $itemattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : $list:lx$ $opt:ox2$ >>;

<:structure_item< exception $uid:s$ : { $list:lx$} $opt:None$ $algattrs:attrs$ $itemattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : { $list:lx$} $opt:None$ $algattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : { $list:lx$} $opt:None$ $itemattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : { $list:lx$} $opt:None$ >>;

<:structure_item< exception $uid:s$ : { $list:lx$} -> $x2$ $algattrs:attrs$ $itemattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : { $list:lx$} -> $x2$ $algattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : { $list:lx$} -> $x2$ $itemattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : { $list:lx$} -> $x2$ >>;

<:structure_item< exception $uid:s$ : { $list:lx$} $opt:ox2$ $algattrs:attrs$ $itemattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : { $list:lx$} $opt:ox2$ $algattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : { $list:lx$} $opt:ox2$ $itemattrs:attrs$ >>;
<:structure_item< exception $uid:s$ : { $list:lx$} $opt:ox2$ >>;

<:structure_item< exception $uid:s$ = $longid:x$ $algattrs:attrs$ $itemattrs:attrs$ >>;
<:structure_item< exception $uid:s$ = $longid:x$ $algattrs:attrs$ >>;
<:structure_item< exception $uid:s$ = $longid:x$ $itemattrs:attrs$ >>;
<:structure_item< exception $uid:s$ = $longid:x$ >>;
#endif
<:structure_item< module _ = $me$ $itemattrs:attrs$ >> ;
<:structure_item< module _ = $me$ >>;
<:structure_item< module $uid:s$ = $me$ $itemattrs:attrs$ >> ;
<:structure_item< module $uid:s$ = $me$ >>;
<:structure_item< module $opt:os$ = $me$ $itemattrs:attrs$ >> ;
<:structure_item< module $opt:os$ = $me$ >>;
<:structure_item< module rec $list:lx$ >>;
<:structure_item< module type $uid:s$ $itemattrs:attrs$ >> ;
<:structure_item< module type $uid:s$ >>;
<:structure_item< module type $uid:s$ = $mt$ $itemattrs:attrs$ >> ;
<:structure_item< module type $uid:s$ = $mt$ >>;
<:structure_item< module type $uid:s$ $opt:omt$ $itemattrs:attrs$ >> ;
<:structure_item< module type $uid:s$ $opt:omt$ >>;
<:structure_item< open $overrideflag:x1$ $me$ $itemattrs:attrs$ >> ;
<:structure_item< open $overrideflag:x1$ $me$ >>;
<:structure_item< class $classlist:lx$ >>;
<:structure_item< class type $classtypelist:lx$ >>;
<:structure_item< include $me$ $itemattrs:attrs$ >> ;
<:structure_item< include $me$ >>;
<:structure_item< [@@@ $attrid:s$ $list:x$] >>;
<:structure_item< [@@@ $attrid:s$ : $list:x$] >>;
<:structure_item< [@@@ $attrid:s$ : $x$] >>;
<:structure_item< [@@@ $attrid:s$ ? $x1$] >>;
<:structure_item< [@@@ $attrid:s$ ? $x1$ when $x2$] >>;
<:structure_item< [@@@ $attrid:s$ ? $x1$ $expropt:ox2$] >>;
<:structure_item< [%% $attrid:s$ $list:x$] $itemattrs:attrs$ >> ;
<:structure_item< [%% $attrid:s$ $list:x$] >>;
<:structure_item< [%% $attrid:s$ : $list:x$] $itemattrs:attrs$ >> ;
<:structure_item< [%% $attrid:s$ : $list:x$] >>;
<:structure_item< [%% $attrid:s$ : $x$] $itemattrs:attrs$ >> ;
<:structure_item< [%% $attrid:s$ : $x$] >>;
<:structure_item< [%% $attrid:s$ ? $x1$] $itemattrs:attrs$ >> ;
<:structure_item< [%% $attrid:s$ ? $x1$] >>;
<:structure_item< [%% $attrid:s$ ? $x1$ when $x2$] $itemattrs:attrs$ >> ;
<:structure_item< [%% $attrid:s$ ? $x1$ when $x2$] >>;
<:structure_item< [%% $attrid:s$ ? $x1$ $expropt:ox2$] $itemattrs:attrs$ >> ;
<:structure_item< [%% $attrid:s$ ? $x1$ $expropt:ox2$] >>;
[@@@"ocaml.text" "structure_item_desc";];
[@@@"ocaml.text" "value_binding";];
<:value_binding< $x1$ = $x2$ $itemattrs:attrs$ >> ;
<:value_binding< $x1$ = $x2$ >>;
[@@@"ocaml.text" "module_binding";];
[@@@"ocaml.text" "position";];
[@@@"ocaml.text" "location";];
[@@@"ocaml.text" "located";];
[@@@"ocaml.text" "str_vala";];
[@@@"ocaml.text" "longident_t";];
[@@@"ocaml.text" "ast_constant";];
[@@@"ocaml.text" "arg_label";];
<:arg_label< >>;
<:arg_label< $lid:s$ : >>;
<:arg_label< ? $lid:s$ : >>;
[@@@"ocaml.text" "label";];
[@@@"ocaml.text" "closed_flag";];
[@@@"ocaml.text" "rec_flag";];
[@@@"ocaml.text" "direction_flag";];
[@@@"ocaml.text" "private_flag";];
[@@@"ocaml.text" "mutable_flag";];
[@@@"ocaml.text" "virtual_flag";];
[@@@"ocaml.text" "override_flag";];
[@@@"ocaml.text" "variance";];
#if OCAML_VERSION >= (4,12,0)
[@@@"ocaml.text" "injectivity";];
#endif
[@@@"ocaml.text" "constant";];
<:constant< $int:s$ >>;
<:constant< $int32:s$ >>;
<:constant< $int64:s$ >>;
<:constant< $nativeint:s$ >>;
<:constant< $char:x$ >>;
<:constant< $string:s1$ >>;
<:constant< $string:s1$ $delim:s2$ >>;
#if OCAML_VERSION >= (4,11,0)
Parsetree.Pconst_string s1 loc os2;
#else
Parsetree.Pconst_string s1 os2;
#endif
<:constant< $float:sxf1$ >>;
[@@@"ocaml.text" "location_stack";];
[@@@"ocaml.text" "toplevel_phrase";];
[@@@"ocaml.text" "toplevel_directive";];
[@@@"ocaml.text" "directive_argument";];
[@@@"ocaml.text" "directive_argument_desc";];
[@@@"ocaml.text" "functor_parameter_vala";];
